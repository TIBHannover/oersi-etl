if exists ("metadata.error")
  reject()
end

if any_equal ("header.status", "deleted")
  reject()
end


vacuum()

do once("macrosAndMaps")
  include ("../../sharedFixes/macros.fix")
  include ("../../sharedFixes/maps.fix")
  # workflow specific map
  put_filemap("data/maps/lecture2go2destatis.tsv","lecture2go2destatis","sep_char":"\t")
end

# ---------------license----------------------------------

unless any_match("metadata.oai_datacite.payload.resource.rightsList.rights.rightsURI","^http[s]?:\\/\\/creativecommons.org\\/(licenses|licences|publicdomain)\\/.*|^http[s]?:\\/\\/www.gnu.org\\/licenses\\/.*|^http[s]?:\\/\\/www.apache.org\\/licenses\\/.*|http[s]?://opensource.org/licenses/MIT|^http[s]?:\\/\\/www.opensource.org\\/licenses\\/BSD.*")
  reject()  
end

if any_match("metadata.oai_datacite.payload.resource.rightsList.rights.rightsURI","^http[s]?:\\/\\/creativecommons.org\\/(licenses|licences|publicdomain)\\/.*|^http[s]?:\\/\\/www.gnu.org\\/licenses\\/.*|^http[s]?:\\/\\/www.apache.org\\/licenses\\/.*|http[s]?://opensource.org/licenses/MIT|^http[s]?:\\/\\/www.opensource.org\\/licenses\\/BSD.*")
  copy_field("metadata.oai_datacite.payload.resource.rightsList.rights.rightsURI","license.id")
end


# ---------------id----------------------------------
do list(path:"metadata.oai_datacite.payload.resource.identifier","var":"$i")
  if any_equal("$i.identifierType", "URL")
    copy_field("$i.value","@id")
  end
end

unless exists ("@id")
  reject()
end

copy_field("@id","id")

# ---------------name----------------------------------
# The json-validator created an error due to duplicated element "name". Therefore the two conditionals should prevent a duplicate elemente.

unless exists("name")
  do list(path:"metadata.oai_datacite.payload.resource.titles.title", "var": "$i")
    unless exists("$i.titleType")
      copy_field("$i.value", "name")
    end
  end
end


# ---------------dateCreated----------------------------------

do list(path:"metadata.oai_datacite.payload.resource.dates.date","var":"$i")
  if any_equal("$i.dateType", "Created")
    copy_field("$i.value","dateCreated")
  end
end


# ---------------description----------------------------------

do list(path:"metadata.oai_datacite.payload.resource.descriptions.description","var":"$i")
  copy_field("$i.value","description")
end


# ------ type --- 

add_array("type[]", "LearningResource")

# ------ learningResourceType --- 
# only video

add_array("learningResourceType[]")
add_field("learningResourceType[].$append.id","https://w3id.org/kim/hcrt/video")
add_field("learningResourceType[].$last.prefLabel.de","Video")
add_field("learningResourceType[].$last.prefLabel.en","Video")


# ------ duration --- 
copy_field("metadata.oai_datacite.payload.resource.sizes.size.value","duration")
replace_all("duration","(.*):(.*):(.*)", "PT$1H$2M$3S")


# ------ publisher --- 

add_array("publisher[]")

do list(path:"metadata.oai_datacite.payload.resource.publisher","var":"$i")
  copy_field("$i.value","publisher[].$append.name")
  add_field("publisher[].$last.type", "Organization")
end

# ---------mainEntityOfPage----------------

add_array("mainEntityOfPage[]")
add_field("mainEntityOfPage[].$append.test","")
copy_field("id", "mainEntityOfPage[].$last.id")
add_field("mainEntityOfPage[].$last.provider.id","$[service_id]")
add_field("mainEntityOfPage[].$last.provider.type","Service")
add_field("mainEntityOfPage[].$last.provider.name","$[service_name]")


# ---------inLanguage----------------

add_array("inLanguage[]")
unless any_contain("metadata.oai_datacite.payload.resource.language.value","xx")
  copy_field("metadata.oai_datacite.payload.resource.language.value","inLanguage[].$append")
end
replace_all("inLanguage[].*", "http://id.loc.gov/vocabulary/iso639-1/", "")


# ---------creator----------------
# TIB does not differentiate between an organisation and a person.

add_array("creator[]")
do list(path:"metadata.oai_datacite.payload.resource.creators.creator", "var":"$i")
# There might be creators with empty names that are filtered out at the beginning.
  add_field("creator[].$append.test", "")
  copy_field("$i.creatorName.value", "creator[].$last.name")
  if any_equal("$i.creatorName.nameType","Organizational")
    add_field("creator[].$last.type", "Organization")
  else
    add_field("creator[].$last.type", "Person")
  end
  do list(path:"$i.nameIdentifier", "var":"$j")
    if any_equal("$j.nameIdentifierScheme","ORCID")
      if any_match("$j.value", "(\\d{4}-\\d{4}-\\d{4}-\\d{4}).*|.*(\\d{4}-\\d{4}-\\d{4}-\\d{4}).*")
        copy_field("$j.value", "creator[].$last.id")
      end
    end
  end
  if exists("$i.affiliation.value")
    if any_contain("$i.affiliation.value","nstitut")
      add_field("creator[].$last.affiliation.name", "Universität Hamburg")
    else
      copy_field("$i.affiliation.value", "creator[].$last.affiliation.name")
    end
    add_field("creator[].$last.affiliation.type", "Organization")
  end
end

replace_all("creator[].*.name","(.+), (.+)", "$2 $1")
replace_all("creator[].*.id", "(\\d{4}-\\d{4}-\\d{4}-\\d{4}).*|.*(\\d{4}-\\d{4}-\\d{4}-\\d{4}).*","https://orcid.org/$1")
trim("creator[].*.affiliation.name")
replace_all("creator[].*.affiliation.name","Uni Hamburg|Uni HH", "Universität Hamburg")

# ---------contributor----------------
add_array("contributor[]")
do list(path:"metadata.oai_datacite.payload.resource.contributors.contributor", "var":"$i")
# There might be contributors with empty names that are filtered out at the beginning.
  add_field("contributor[].$append.test", "")
  copy_field("$i.contributorName.value", "contributor[].$last.name")
  if any_equal("$i.contributorName.nameType","Organizational")
    add_field("contributor[].$last.type", "Organization")
  else
    add_field("contributor[].$last.type", "Person")
  end
  do list(path:"$i.nameIdentifier", "var":"$j")
    if any_equal("$j.nameIdentifierScheme","ORCID")
      copy_field("$j.value", "contributor[].$last.id")
    end
  end
end

# contributors have functions in parenthesis these need to be deleted
replace_all("contributor[].*.name","(.+), (.+)", "$2 $1")
prepend("contributor[].*.id", "https://orcid.org/")


# ---------keywords----------------

add_array("keywords[]")
add_array("@about")
do list(path:"metadata.oai_datacite.payload.resource.subjects.subject", "var":"$i")
  copy_field("$i.value", "keywords[].$append")
  copy_field("$i.value", "@about.$append")
end
  

lookup("@about.*","lecture2go2destatis", delete:"true")

add_array("about[]")
do list(path:"@about", "var":"$i")
  copy_field("$i", "about[].$append.id")
  copy_field("$i", "about[].$last.prefLabel.de")
end
lookup("about[].*.prefLabel.de", "destatis-deLabel2Uri", delete:"true")


# ---------------conditionsOfAccess----------------------------------
add_field("conditionsOfAccess.id","http://w3id.org/kim/conditionsOfAccess/no_login")

# -------isPartOf/hasPart---------
add_array("isPartOf[]")
add_array("hasPart[]")
do list(path: "metadata.oai_datacite.payload.resource.relatedIdentifiers.relatedIdentifier", "var": "$i")
  if any_equal("$i.relationType","IsPartOf")
    copy_field("$i.value", "isPartOf[].$append.id")
  elsif any_equal("$i.relationType","HasPart")
    copy_field("$i.value", "hasPart[].$append.id")
  end
end

# ------ encoding --- 

add_array("encoding[]")
if exists("@id")
  copy_field("@id","encoding[].$append.embedUrl")
  add_field("encoding[].$last.type", "MediaObject")
  replace_all("encoding[].*.embedUrl", "https://lecture2go.uni-hamburg.de/l2go/-/get/v/", "https://lecture2go.uni-hamburg.de/iframe/?obj=")
end


# ---------------@context ----------------------------------

add_array("@context[]", "https://w3id.org/kim/amb/context.jsonld")
# resource is german therefore prefer de if multiple or no inLanguage are available
if any_equal("inLanguage[]","de")
  add_hash("@context[].$append", "@language": "de")
elsif any_equal("inLanguage[]","en")
  add_hash("@context[].$append", "@language": "en")
else
  copy_field("inLanguage[].1", "@context[].$append.@language")
end
# resources without inLanguage-Values set default to de
unless exists("inLanguage[].1")
  add_hash("@context[].$append", "@language": "de")
end

# ------ tidy up --- 
include ("../../sharedFixes/cleanUp.fix")

