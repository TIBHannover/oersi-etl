# See https://github.com/TobiasNx/Catmandu-Testing/blob/master/DuePub-Test/duepub-catmandu.fix

if exists ("metadata.error")
    reject()
end

if any_equal ("header.status", "deleted")
    reject()
end

# ---------------@context ----------------------------------

set_array("@context[]", "https://w3id.org/kim/lrmi-profile/draft/context.jsonld")
set_hash("@context[].$append", "@language": "de")

# --------------id ----------------------------------------
do list("path": "metadata.mods:mods.mods:identifier", "var": "identifier")
    if all_match("identifier.value","https://duepublico2.uni-due.de/receive/.*")
        copy_field("identifier.value","id")
    end
end

#  ------------image ------------------------------------
do list("path": "metadata.mods:mods.mods:location.mods:url", "var": "url")
    if all_match("url.value","^https://duepublico2.uni-due.de/rsc/thumbnail/.*")
        copy_field("url.value","image")
    end
end


#  ------------encoding ------------------------------------
set_array("encoding[]")
do list("path": "metadata.mods:mods.mods:location.mods:url", "var": "url")
    if all_match("url.value","^https://duepublico2.uni-due.de/servlets/.*")
        copy_field("url.value","encoding[].$append.contentUrl")
        add_field("encoding[].$last.type", "MediaObject")
    end
end

#  ------------name ------------------------------------
paste("name","metadata.mods:mods.mods:titleInfo.mods:nonSort.value","metadata.mods:mods.mods:titleInfo.mods:title.value")

#  ------------creator------------------------------------
set_array("creator[]")
do list("path":"metadata.mods:mods.mods:name","var":"n")
    if any_match("n.mods:role.mods:roleTerm.*.value","aut|cre")
        copy_field("n.mods:displayForm.value","creator[].$append.name")
        if any_equal("n.type","personal")
            add_field("creator[].$last.type", "Person")
        end
        if any_equal("n.type","corporate")
            add_field("creator[].$last.type", "Organization")
        end
    end
end

#  ------------contributor------------------------------------
set_array("contributor[]")
do list("path":"metadata.mods:mods.mods:name","var":"n")
    if any_match("n.type","corporate|personal")
        unless any_match("n.mods:role.mods:roleTerm.*.value","aut|cre|his")
            copy_field("n.mods:displayForm.value","contributor[].$append.name")
            if any_equal("n.type","personal")
                add_field("contributor[].$last.type", "Person")
            end
            if any_equal("n.type","corporate")
                add_field("contributor[].$last.type", "Organization")
            end
        end
    end
end

#  ------------sourceOrganization------------------------------------
set_array("sourceOrganization[]")
do list("path":"metadata.mods:mods.mods:name","var":"org")
    if any_match("org.mods:role.mods:roleTerm.*.value","his")
        unless exists("org.mods:displayForm.value")
            lookup("org.valueURI","data/maps/duepublico-corporate.tsv","sep_char":"\t")
            copy_field("org.valueURI","sourceOrganization[].$append.name")           
        end
        add_field("sourceOrganization[].$last.type", "Organization")
    end
end

add_field("sourceOrganization[].$append.name", "Universit√§t Duisburg-Essen")
add_field("sourceOrganization[].$last.type", "Organization")

#  ------------description------------------------------------
copy_field("metadata.mods:mods.mods:abstract.*.value","description")

# -----------license----------
copy_field("metadata.mods:mods.mods:accessCondition.xlink:href","license.id")
lookup("license.id","data/maps/duepublico-licenses.tsv","sep_char":"\t") 

#  ------------dataCreated------------------------------------
copy_field("metadata.mods:mods.mods:originInfo.mods:dateIssued.value","dataCreated")

#  ------------inLanguage------------------------------------
copy_field("metadata.mods:mods.mods:language.mods:languageTerm.value","inLanguage[].$append")

# ---------------type ----------------------------------
set_array("type[]", "LearningResource")

# ---------------learningResourceType ----------------------------------
set_array("learningResourceType[]")
do list("path":"metadata.mods:mods.mods:genre","var":"lRT")
    if any_match("lRT.authorityURI","https://duepublico.uni-due.de/api/v1/classifications/mir_genres")
        lookup("lRT.valueURI", "data/maps/DuePub-HCRT.tsv","sep_char":"\t")
        copy_field("lRT.valueURI","learningResourceType[].$append.id")
        copy_field("lRT.valueURI","learningResourceType[].$last.prefLabel.de")
        copy_field("lRT.valueURI","learningResourceType[].$last.prefLabel.en")
    end
end

lookup("learningResourceType[].*.prefLabel.de", "data/maps/hcrt-de-labels.tsv","sep_char":"\t")
lookup("learningResourceType[].*.prefLabel.en", "data/maps/hcrt-en-labels.tsv","sep_char":"\t")

# ---------------keywords----------------------------------
set_array("keywords[]")
# TODO: Keywords seem to be tokenized in the data mostly, but some are concatinated. Need to split and add to the array.
copy_field("metadata.mods:mods.mods:subject.mods:topic.*.value","keywords[].$append")

#  ------------about------------------------------------
set_array("about[]")
do list("path":"metadata.mods:mods.mods:classification","var":"classification")
    if any_equal("classification.authorityURI","https://duepublico.uni-due.de/api/v1/classifications/destatis")
        lookup("classification.valueURI", "data/maps/destatisPersonal2destatisStudierende.tsv","sep_char":"\t")
        copy_field("classification.valueURI","about[].$append.id")
        copy_field("classification.valueURI","about[].$last.prefLabel.de")
    end
end

lookup("about[].*.prefLabel.de", "data/maps/subject-labels.tsv","sep_char":"\t")

# ---------mainEntityOfPage----------------
set_array("mainEntityOfPage[]")
copy_field("id", "mainEntityOfPage[].$append.id")
add_field("mainEntityOfPage[].$last.provider.id","$[service_id]")
add_field("mainEntityOfPage[].$last.provider.type","Service")
add_field("mainEntityOfPage[].$last.provider.name","$[service_name]")


# ---------tidy up!----------------
retain("@context[]","id","image","name","creator[]","contributor[]","sourceOrganization[]", "license","description","dataCreated","inLanguage[]","type[]","learningResourceType[]","keywords[]","about[]","mainEntityOfPage[]", "encoding[]")
vacuum()